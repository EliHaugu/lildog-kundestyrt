default_node_functions:
  nrf_connect: |
    # THIS IS A DEFAULT NODE, TYPE: NRF CONNECT, DO NOT REMOVE ANY LINES
    # With this node you can check the connection between your device and another
    # The android_device_id of your chosen device will be used to connect
    # Please fill in the marked areas with your parameters

    # Insert mac addresses of devices to check connection to
    # An example is added in the list, remove this before adding your own
    mac_addresses = ['example_mac_address']

  nrf_custom: |
    # THIS IS A DEFAULT NODE, TYPE: NRF CUSTOM, DO NOT REMOVE ANY LINES
    # With this node you can add your own custom nRF test scripts with custom vars
    # The android_device_id of your chosen device will be used to connect
    # Please fill in the marked areas with your parameters

    # Insert variables to be used in your script
    # This can be mac addresses to be used, service uuids, etc.
    # An example is added to the object below, remove this before adding your own
    # VARIABLES START
    {
      'example_var_name_in_script': 'example_var_value',
    }
    # VARIABLES END

    # Insert your XML script here
    # An example is shown below, remove this before adding your own
    # XML SCRIPT START
    <example_xml_script> </example_xml_script>
    # XML SCRIPT END

  api_assert: |
    # This is a default example node showing how to use assert with API
    # Feel free to add more lines if necessary, code is parsed as Python
    
    import requests

    api_url = "https://example-url.com/api/endpoint"

    def api_assert():
      try:
          response = requests.get(api_url)
          
          # Check if the request was successful
          response.raise_for_status()
          
          # Parse JSON response (or handle the response as needed)
          data = response.json()
          
          # Example assertions (modify based on the data you expect)
          assert "expected_key" in data, "Expected key not found in response"
          assert data["status"] == "success", "API call was not successful"
          
          return True
          
      except requests.exceptions.RequestException as e:
          return False
      except AssertionError as e:
          return False
    
    return api_assert()
